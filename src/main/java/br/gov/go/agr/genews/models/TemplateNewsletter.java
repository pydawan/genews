package br.gov.go.agr.genews.models;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import jedi.db.models.CascadeType;
import jedi.db.models.DateTimeField;
import jedi.db.models.ForeignKeyField;
import jedi.db.models.IntegerField;
import jedi.db.models.Manager;
import jedi.db.models.Model;
import jedi.db.models.QuerySet;
import jedi.db.models.Table;
import jedi.types.DateTime;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;

/**
 * @author thiago-amm
 * @version v1.0.0
 * @since v1.0.0
 */
@Getter
@Setter
@Accessors(fluent = true, chain = true)
@ToString(includeFieldNames = true)
@Table(name = "templates")
public class TemplateNewsletter extends Model {
   
   private static final long serialVersionUID = 1;
   
   @ForeignKeyField(cascade_type = CascadeType.NONE)
   private Newsletter newsletter;
   
   @IntegerField(required = false)
   private int edicao;
   
   @ForeignKeyField(
      constraint_name = "fk_templates_usuarios_autor",
      comment = "Usuário responsável pela geração do template da newsletter.",
      cascade_type = CascadeType.INSERT)
   private Usuario autor;
   
   @DateTimeField(auto_now_add = false, auto_now = true)
   private Date dataGeracao;
   
   private List<Noticia> noticias;
   
   public static Manager objects = new Manager(TemplateNewsletter.class);
   
   public TemplateNewsletter(Newsletter newsletter, int edicao, Usuario autor, Date dataGeracao, List<Noticia> noticias) {
      this.newsletter = newsletter;
      this.edicao = edicao;
      this.autor = autor == null ? new Usuario() : autor;
      this.dataGeracao = dataGeracao == null ? new Date() : dataGeracao;
      this.noticias = noticias == null ? new ArrayList<>() : noticias;
   }
   
   public TemplateNewsletter(Newsletter newsletter, int edicao, Usuario autor, Date dataGeracao) {
      this(newsletter, edicao, autor, dataGeracao, null);
   }
   
   public TemplateNewsletter(Newsletter newsletter, int edicao, Usuario autor) {
      this(newsletter, edicao, autor, null);
   }
   
   public TemplateNewsletter(Newsletter newsletter, Usuario autor) {
      this(newsletter, 1, autor);
   }
   
   public TemplateNewsletter() {
      this(new Newsletter(), new Usuario());
   }
   
   public static TemplateNewsletter of(Newsletter newsletter, int edicao, Usuario autor, Date dataGeracao, List<Noticia> noticias) {
      return new TemplateNewsletter(newsletter, edicao, autor, dataGeracao, noticias);
   }
   
   public static TemplateNewsletter of(Newsletter newsletter, int edicao, Usuario autor, Date dataGeracao) {
      return new TemplateNewsletter(newsletter, edicao, autor, dataGeracao);
   }
   
   public static TemplateNewsletter of(Newsletter newsletter, int edicao, Usuario autor) {
      return new TemplateNewsletter(newsletter, edicao, autor);
   }
   
   public static TemplateNewsletter of(Newsletter newsletter, Usuario autor) {
      return new TemplateNewsletter(newsletter, autor);
   }
   
   public static TemplateNewsletter of() {
      return new TemplateNewsletter();
   }
   
   public Newsletter getNewsletter() {
      return newsletter;
   }
   
   public void setNewsletter(Newsletter newsletter) {
      this.newsletter = newsletter;
   }
   
   public int getEdicao() {
      return edicao;
   }
   
   public void setEdicao(int edicao) {
      this.edicao = edicao;
   }
   
   public Usuario getAutor() {
      return autor;
   }
   
   public void setAutor(Usuario autor) {
      this.autor = autor;
   }
   
   public Date getDataGeracao() {
      return dataGeracao;
   }
   
   public void setDataGeracao(DateTime dataGeracao) {
      this.dataGeracao = dataGeracao;
   }
   
   public List<Noticia> getNoticias() {
      return noticias;
   }
   
   public void setNoticias(List<Noticia> noticias) {
      this.noticias = noticias;
      if (noticias != null) {
         for (Noticia noticia : noticias) {
            noticia.setTemplate(this);
         }
      }
   }
   
   // Generated by Jedi ORM
   public QuerySet<Noticia> getNoticiaSet() {
      return Noticia.objects.getSet(TemplateNewsletter.class, this.id);
   }
   
   public QuerySet<Noticia> noticiaSet() {
      return getNoticiaSet();
   }
   
}
