package br.gov.go.agr.genews.models;

import java.util.Date;

import jedi.db.models.CascadeType;
import jedi.db.models.CharField;
import jedi.db.models.DateTimeField;
import jedi.db.models.EmailField;
import jedi.db.models.ForeignKeyField;
import jedi.db.models.Manager;
import jedi.db.models.Model;
import jedi.db.models.QuerySet;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;

/**
 * @author thiago-amm
 * @version v1.0.0
 * @since v1.0.0
 */
@Getter
@Setter
@Accessors(fluent = true, chain = true)
@ToString(includeFieldNames = true)
public class Newsletter extends Model {
   
   private static final long serialVersionUID = 1L;
   
   @CharField(max_length = 50, unique = true)
   private String nome;
   
   @EmailField(max_length = 100)
   private String email;
   
   @CharField(max_length = 50)
   private String remetente;
   
   @DateTimeField(auto_now_add = false)
   private Date dataCriacao;
   
   @ForeignKeyField(
      constraint_name = "fk_newsletters_usuarios_autor",
      comment = "Usuário responsável pela criação da newsletter.",
      cascade_type = CascadeType.INSERT
   )
   private Usuario autor;
   
   public static Manager objects = new Manager(Newsletter.class);
   
   public Newsletter(String nome, String email, String remetente, Usuario autor, Date dataCriacao) {
      this.nome = nome;
      this.email = email;
      this.remetente = remetente;
      this.autor = autor;
      this.dataCriacao = dataCriacao;
   }
   
   public Newsletter(String nome, String email, String remetente, Usuario autor) {
      this(nome, email, remetente, autor, new Date());
   }
   
   public Newsletter(String nome, String email, String remetente) {
      this(nome, email, remetente, null);
   }
   
   public Newsletter(String nome, String email) {
      this(nome, email, "");
   }
   
   public Newsletter(String nome) {
      this(nome, "");
   }
   
   public Newsletter() {
      this("");
   }
   
   public static Newsletter of(String nome, String email, String remetente, Usuario autor, Date dataCriacao) {
      return new Newsletter(nome, email, remetente, autor, dataCriacao);
   }
   
   public static Newsletter of(String nome, String email, String remetente, Usuario autor) {
      return new Newsletter(nome, email, remetente, autor, new Date());
   }
   
   public static Newsletter of(String nome, String email, String remetente) {
      return new Newsletter(nome, email, remetente, null);
   }
   
   public static Newsletter of(String nome, String email) {
      return new Newsletter(nome, email, "");
   }
   
   public static Newsletter of(String nome) {
      return new Newsletter(nome, "");
   }
   
   public static Newsletter of() {
      return new Newsletter("");
   }
   
   public String getNome() {
      return nome;
   }
   
   public void setNome(String nome) {
      this.nome = nome;
   }
   
   public String getEmail() {
      return email;
   }
   
   public void setEmail(String email) {
      this.email = email;
   }
   
   public String getRemetente() {
      return remetente;
   }
   
   public void setRemetente(String remetente) {
      this.remetente = remetente;
   }
   
   public Date getDataCriacao() {
      return dataCriacao;
   }
   
   public void setDataCriacao(Date dataCriacao) {
      this.dataCriacao = dataCriacao;
   }
   
   public Usuario getAutor() {
      return autor;
   }
   
   public void setAutor(Usuario autor) {
      this.autor = autor;
   }
   
   // Generated by Jedi ORM
   public QuerySet<TemplateNewsletter> getTemplateNewsletterSet() {
      return TemplateNewsletter.objects.getSet(Newsletter.class, this.id);
   }
   public QuerySet<TemplateNewsletter> templateNewsletterSet() {
      return getTemplateNewsletterSet();
   }
   
}
